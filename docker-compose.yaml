# Production docker-compose
services:
  frontend:
    build:
      context: ./client
      dockerfile: prod.Dockerfile
    depends_on:
      - backend
    ports:
      - 7002:7002
    volumes:
      - ./client:/app
      - /app/node_modules
  # NGINX client
  client:
    image: nginx:alpine
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"   # Certbot renew script
    depends_on:
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - ./etc/nginx.conf:/etc/nginx/nginx.conf
  backend:
    build:
      context: ./API
      dockerfile: production.Dockerfile
      target: final
    ports:
      - 8080:8080
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=hotel_db
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    ports:
      - 7001:5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
  # LetsEncrypt certbot
  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"   # Certbot renew script
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt
